rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @returns {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the user IDs match and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource.data.id == request.auth.uid;
    }

    /**
     * @description Defines custom claim for admin.
     * @returns {boolean} True if the custom claim has admin value true, false otherwise.
     */
    function isAdmin() {
      return isSignedIn() && request.auth.token.admin == true;
    }

    /**
     * @description
     * This rule governs access to user profiles.
     * @path /users/{userId}
     * @allow (create) - A user can create their own profile.
     * @allow (get) - Any authenticated user can read any user profile.
     * @allow (update) - A user can update their own profile.
     * @allow (delete) - A user can delete their own profile.
     * @deny (create) - A user cannot create a profile with an ID that doesn't match their own.
     * @principle Enforces document ownership for writes and allows public reads.
     */
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description
     * This rule governs access to product information. Products are readable by anyone, but writes are restricted.
     * @path /products/{productId}
     * @allow (get, list) - Allow public read access.
     * @deny (create, update, delete) - No write permissions granted in this prototype.
     * @principle Allows public reads with restricted writes.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description
     * This rule governs access to inventory batch information.  All access is currently denied.
     * @path /inventoryBatches/{inventoryBatchId}
     * @deny (get, list, create, update, delete) - No permissions granted in this prototype.
     */
    match /inventoryBatches/{inventoryBatchId} {
      allow get, list, create, update, delete: if false;
    }

    /**
     * @description
     * This rule governs access to sale transactions, which are stored under users.
     * @path /users/{userId}/saleTransactions/{saleTransactionId}
     * @allow (create) - A user can create a sale transaction under their own user ID.
     * @allow (get, list) - A user can read/list sale transactions under their own user ID.
     * @allow (update) - A user can update a sale transaction under their own user ID.
     * @allow (delete) - A user can delete a sale transaction under their own user ID.
     * @deny (create, update, delete) - A user cannot create/update/delete sale transactions under another user's ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/saleTransactions/{saleTransactionId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description
     * This rule governs access to sale items. All access is currently denied.
     * @path /saleItems/{saleItemId}
     * @deny (get, list, create, update, delete) - No permissions granted in this prototype.
     */
    match /saleItems/{saleItemId} {
      allow get, list, create, update, delete: if false;
    }

    /**
     * @description
     * This rule governs access to audit logs. Audit logs are publicly readable.
     * @path /auditLogs/{auditLogId}
     * @allow (get, list) - Allow public read access.
     * @deny (create, update, delete) - No write permissions granted in this prototype.
     * @principle Allows public reads.
     */
    match /auditLogs/{auditLogId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description
     * This rule governs access to units of measure. Units are readable by anyone.
     * @path /units/{unitId}
     * @allow (get, list) - Allow public read access.
     * @deny (create, update, delete) - No write permissions granted in this prototype.
     * @principle Allows public reads.
     */
    match /units/{unitId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description
     * This rule governs access to product attributes. Attributes are readable by anyone.
     * @path /productAttributes/{attributeId}
     * @allow (get, list) - Allow public read access.
     * @deny (create, update, delete) - No write permissions granted in this prototype.
     */
    match /productAttributes/{attributeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}