/**
 * @file Firebase Security Rules for SecureStock POS and Inventory System.
 *
 * @Core Philosophy
 * This ruleset enforces a strict user-ownership model for user-specific data while allowing public read access to product and related information.
 * The primary goal is to prevent unauthorized access and data manipulation, focusing on mitigating employee theft and ensuring data integrity.
 *
 * @Data Structure
 * - /users/{userId}: Stores individual user profiles, secured with owner-only access.
 * - /products/{productId}: Stores product details, publicly readable but only writable by authorized users (TODO: Define authorized users/roles).
 * - /inventoryBatches/{inventoryBatchId}: Stores inventory batch information, publicly readable but only writable by authorized users (TODO: Define authorized users/roles).
 * - /users/{userId}/saleTransactions/{saleTransactionId}: Stores sale transactions for each user, secured with owner-only access.
 * - /saleItems/{saleItemId}: Stores individual sale items, publicly readable but only writable by authorized users (TODO: Define authorized users/roles).
 * - /auditLogs/{auditLogId}: Stores audit logs, publicly readable but only writable by authorized users (TODO: Define authorized users/roles).
 * - /units/{unitId}: Stores units of measurement, publicly readable but only writable by authorized users (TODO: Define authorized users/roles).
 * - /productAttributes/{attributeId}: Stores product attribute definitions, publicly readable but only writable by authorized users (TODO: Define authorized users/roles).
 *
 * @Key Security Decisions
 * - User listing is explicitly denied to prevent unauthorized enumeration of user accounts.
 * - All write operations on non-user-owned data (products, inventory, sales items, audit logs, units, product attributes) are currently disabled and marked with TODOs. These require a role-based access control implementation in the future.
 * - Data validation is minimized for prototyping but MUST be expanded in production to enforce schema constraints.
 *
 * @Denormalization for Authorization
 *  None, this initial ruleset relies primarily on path-based authorization.  Future iterations may include denormalized role information in user documents.
 *
 * @Structural Segregation
 * User-specific data (saleTransactions) is stored in user subcollections to simplify ownership checks and access control. Publicly readable data (products, etc.) is stored in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     *    - request.auth.uid: 'user123'
     *    - resource.data.id: 'user123'
     * @deny (create) User with ID 'user123' cannot create a profile for 'user456'.
     *    - request.auth.uid: 'user123'
     *    - resource.data.id: 'user456'
     * @allow (get, list) User with ID 'user123' can read their profile.
     *    - request.auth.uid: 'user123'
     * @deny (get, list) User with ID 'user123' cannot read the profile of 'user456'.
     *    - request.auth.uid: 'user123'
     * @allow (update) User with ID 'user123' can update their own profile.
     *    - request.auth.uid: 'user123'
     *    - resource.data.id: 'user123'
     * @deny (update) User with ID 'user123' cannot update the profile of 'user456'.
     *    - request.auth.uid: 'user123'
     *    - resource.data.id: 'user456'
     * @allow (delete) User with ID 'user123' can delete their own profile.
     *    - request.auth.uid: 'user123'
     *    - resource.data.id: 'user123'
     * @deny (delete) User with ID 'user123' cannot delete the profile of 'user456'.
     *    - request.auth.uid: 'user123'
     *    - resource.data.id: 'user456'
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Allow anyone to create a user document if the userId matches their auth uid.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to product documents.  Read access is public, write access is restricted.
     * @path /products/{productId}
     * @allow (get, list) Any user can read product information.
     * @deny (create) No one can create product documents without authorization.
     * @deny (update) No one can update product documents without authorization.
     * @deny (delete) No one can delete product documents without authorization.
     * @principle Public read, owner-only (TODO) write access.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation and role-based access.
    }

    /**
     * @description Controls access to inventory batch documents.  Read access is public, write access is restricted.
     * @path /inventoryBatches/{inventoryBatchId}
     * @allow (get, list) Any user can read inventory batch information.
     * @deny (create) No one can create inventory batch documents without authorization.
     * @deny (update) No one can update inventory batch documents without authorization.
     * @deny (delete) No one can delete inventory batch documents without authorization.
     * @principle Public read, owner-only (TODO) write access.
     */
    match /inventoryBatches/{inventoryBatchId} {
      allow get, list: if true;
      allow create, update, delete: if false;  // TODO: Add owner validation and role-based access.
    }

    /**
     * @description Controls access to sale transaction documents within a user's profile.
     * @path /users/{userId}/saleTransactions/{saleTransactionId}
     * @allow (create) User with ID 'user123' can create a sale transaction under their profile.
     *    - request.auth.uid: 'user123'
     * @deny (create) User with ID 'user123' cannot create a sale transaction under 'user456's profile.
     *    - request.auth.uid: 'user123'
     * @allow (get, list) User with ID 'user123' can read sale transactions under their profile.
     *    - request.auth.uid: 'user123'
     * @deny (get, list) User with ID 'user123' cannot read sale transactions under 'user456's profile.
     *    - request.auth.uid: 'user123'
     * @allow (update) User with ID 'user123' can update a sale transaction under their profile.
     *    - request.auth.uid: 'user123'
     * @deny (update) User with ID 'user123' cannot update a sale transaction under 'user456's profile.
     *    - request.auth.uid: 'user123'
     * @allow (delete) User with ID 'user123' can delete a sale transaction under their profile.
     *    - request.auth.uid: 'user123'
     * @deny (delete) User with ID 'user123' cannot delete a sale transaction under 'user456's profile.
     *    - request.auth.uid: 'user123'
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/saleTransactions/{saleTransactionId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to sale item documents.  Read access is public, write access is restricted.
     * @path /saleItems/{saleItemId}
     * @allow (get, list) Any user can read sale item information.
     * @deny (create) No one can create sale item documents without authorization.
     * @deny (update) No one can update sale item documents without authorization.
     * @deny (delete) No one can delete sale item documents without authorization.
     * @principle Public read, owner-only (TODO) write access.
     */
    match /saleItems/{saleItemId} {
      allow get, list: if true;
      allow create, update, delete: if false;  // TODO: Add owner validation and role-based access.
    }

    /**
     * @description Controls access to audit log documents.  Read access is public, write access is restricted.
     * @path /auditLogs/{auditLogId}
     * @allow (get, list) Any user can read audit log information.
     * @deny (create) No one can create audit log documents without authorization.
     * @deny (update) No one can update audit log documents without authorization.
     * @deny (delete) No one can delete audit log documents without authorization.
     * @principle Public read, owner-only (TODO) write access.
     */
    match /auditLogs/{auditLogId} {
      allow get, list: if true;
      allow create, update, delete: if false;  // TODO: Add owner validation and role-based access.
    }

    /**
     * @description Controls access to unit documents.  Read access is public, write access is restricted.
     * @path /units/{unitId}
     * @allow (get, list) Any user can read unit information.
     * @deny (create) No one can create unit documents without authorization.
     * @deny (update) No one can update unit documents without authorization.
     * @deny (delete) No one can delete unit documents without authorization.
     * @principle Public read, owner-only (TODO) write access.
     */
    match /units/{unitId} {
      allow get, list: if true;
      allow create, update, delete: if false;  // TODO: Add owner validation and role-based access.
    }

    /**
     * @description Controls access to product attribute documents.  Read access is public, write access is restricted.
     * @path /productAttributes/{attributeId}
     * @allow (get, list) Any user can read product attribute information.
     * @deny (create) No one can create product attribute documents without authorization.
     * @deny (update) No one can update product attribute documents without authorization.
     * @deny (delete) No one can delete product attribute documents without authorization.
     * @principle Public read, owner-only (TODO) write access.
     */
    match /productAttributes/{attributeId} {
      allow get, list: if true;
      allow create, update, delete: if false;  // TODO: Add owner validation and role-based access.
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the requesting user is the owner of the resource.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  // Helper function to determine if the requesting user is the owner of an existing resource.
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}