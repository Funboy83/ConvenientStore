/**
 * @fileoverview Firestore Security Rules for SecureStock application.
 *
 * Core Philosophy:
 * Two-collection security model to prevent employee tampering:
 * 1. pending_transactions: POS employees write-only (cannot read/edit/delete)
 * 2. final_invoices: Admin/Owner read/write only (employees have ZERO access)
 *
 * This creates an immutable audit trail and prevents fraud.
 *
 * Role-Based Access Control:
 * - Employee: Can only CREATE pending transactions (write-once)
 * - Admin/Owner: Full access to review, finalize, and manage all data
 *
 * Data Structure:
 * - /pending_transactions/{transactionId}: Temporary sales from POS (employee write-only)
 * - /final_invoices/{invoiceId}: Verified, official sales (admin-only)
 * - /products/{productId}: Product catalog (read: all, write: admin)
 * - /customers/{customerId}: Customer data (read: admin, create: all)
 * - /users/{userId}: User profiles
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is an admin/owner
    function isAdmin() {
      return request.auth != null && 
             (request.auth.token.role == 'admin' || 
              request.auth.token.admin == true ||
              request.auth.uid == "z1f8hRtgquUjTOmrM3bLSmvy5R73");
    }

    // Helper function to check if user is an employee
    function isEmployee() {
      return request.auth != null && request.auth.token.role == 'employee';
    }

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    /**
     * PENDING TRANSACTIONS COLLECTION
     * POS employees write sales here (WRITE-ONCE, cannot edit/delete)
     * Admin can read and manage for daily review
     * 
     * TEMPORARY: Allowing authenticated users to read/delete for testing
     * TODO: Restrict to admin-only once role claims are properly set
     */
    match /pending_transactions/{transactionId} {
      // Any authenticated user (including anonymous POS users) can CREATE transactions (write-once)
      allow create: if isAuthenticated();
      
      // TEMPORARY: Allow authenticated users to read (for admin dashboard testing)
      // TODO: Change back to 'if isAdmin()' once roles are configured
      allow read: if isAuthenticated();
      
      // TEMPORARY: Allow authenticated users to update and delete (for finalization)
      // TODO: Change back to 'if isAdmin()' once roles are configured
      allow update, delete: if isAuthenticated();
    }

    /**
     * FINAL INVOICES COLLECTION
     * Only admin/owner can access (employees have ZERO access)
     * This is the official, verified record
     * 
     * TEMPORARY: Allowing authenticated users for testing
     * TODO: Restrict to admin-only once role claims are properly set
     */
    match /final_invoices/{invoiceId} {
      // TEMPORARY: Allow authenticated users to read/write (for admin dashboard testing)
      // TODO: Change back to 'if isAdmin()' once roles are configured
      allow read, write: if isAuthenticated();
    }

    /**
     * User Profiles
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow list: if isAdmin();
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow delete: if isAdmin();
    }

    /**
     * Products Collection
     * Everyone can read (for POS), only admin can modify
     * 
     * TEMPORARY: Allowing authenticated users to update for inventory deduction
     * TODO: Restrict to admin-only once role claims are properly set
     */
    match /products/{productId} {
      allow get, list: if isAuthenticated();
      // TEMPORARY: Allow authenticated users to update (for inventory deduction during finalization)
      allow create, update, delete: if isAuthenticated();
    }

    /**
     * Inventory Batches Collection
     * Read-only for all, admin can modify
     */
    match /inventoryBatches/{inventoryBatchId} {
      allow get, list: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }

    /**
     * DEPRECATED: Old sale transactions structure
     * Admin-only access (kept for historical data)
     */
    match /users/{userId}/saleTransactions/{saleTransactionId} {
      allow read, write: if isAdmin();
    }

    /**
     * Sale Items Collection
     * Admin-only access
     */
    match /saleItems/{saleItemId} {
      allow read, write: if isAdmin();
    }

    /**
     * Audit Logs Collection
     * Admin can view, system can write
     */
    match /auditLogs/{auditLogId} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }

    /**
     * Units Collection
     * All can read, admin can modify
     */
    match /units/{unitId} {
      allow get, list: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }

    /**
     * Product Attributes Collection
     * All can read, admin can modify
     */
    match /productAttributes/{attributeId} {
      allow get, list: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }

    /**
     * Categories Collection
     * All can read, admin can modify
     */
    match /categories/{categoryId} {
      allow get, list: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }

    /**
     * Brands Collection
     * All can read, admin can modify
     */
    match /brands/{brandId} {
      allow get, list: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }

    /**
     * Lots Collection
     * All can read, admin can modify
     */
    match /lots/{lotId} {
      allow get, list: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }

    /**
     * Customers Collection
     * Secure customer access for POS integration.
     * - POS app (anonymous auth) can ONLY create customers, cannot read/list/update/delete
     * - Only the owner/admin can read, list, update, and delete customers
     * - Protects customer privacy: POS cannot download customer list
     * - Prevents data tampering: POS cannot modify customer details after creation
     * 
     * TEMPORARY: Allowing authenticated users to read for testing
     * TODO: Restrict to admin-only once role claims are properly set
     */
    match /customers/{customerId} {
      // TEMPORARY: Allow authenticated users to read/list (for admin dashboard testing)
      // TODO: Change back to 'if isAdmin()' once roles are configured
      allow get, list: if isAuthenticated();
      
      // Anyone authenticated (including POS with anonymous auth) can create customers
      allow create: if isAuthenticated();
      
      // TEMPORARY: Allow authenticated users to update/delete (for admin dashboard testing)
      // TODO: Change back to 'if isAdmin()' once roles are configured
      allow update, delete: if isAuthenticated();
    }

    /**
     * Suppliers Collection
     * All can read, admin can modify
     */
    match /suppliers/{supplierId} {
      allow get, list: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }

    /**
     * DEPRECATED: Old sale transactions collection
     * Replaced by pending_transactions and final_invoices
     * Admin-only access for historical data
     */
    match /saleTransactions/{transactionId} {
      allow read, write: if isAdmin();
    }
  }
}
