/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for personal data and allows public read access to product and inventory data.
 *
 * Data Structure:
 * - /users/{userId}: Stores personal user data; only the owning user can read or write.
 * - /products/{productId}: Stores product information; publicly readable, but write access is unrestricted due to missing ownership information.
 * - /inventoryBatches/{inventoryBatchId}: Stores inventory batch information; publicly readable, but write access is unrestricted due to missing ownership information.
 * - /users/{userId}/saleTransactions/{saleTransactionId}: Stores sale transaction data; only the owning user can read or write.
 * - /saleItems/{saleItemId}: Stores sale items; publicly readable, but write access is unrestricted due to missing ownership information.
 * - /auditLogs/{auditLogId}: Logs system actions; publicly readable, but write access is unrestricted due to missing ownership information.
 *
 * Key Security Decisions:
 * - User listing is disallowed to prevent enumeration.
 * - Public read access is granted for products, inventory batches, sale items and audit logs to allow unauthenticated data retrieval, but write access is currently unrestricted due to the lack of ownership fields.
 * - All write operations require authentication and explicit authorization checks to prevent unauthorized data modification.
 *
 * Denormalization for Authorization:
 * - SaleTransactions are stored under /users/{userId} to easily enforce ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user documents. Only the authenticated user can read or write their own data.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates a new user document with id: 'user123'.
     * @deny (create) User with ID 'user456' attempts to create a document with id: 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Prevent user enumeration

      // Allow the user to create their own document, enforcing that the document ID matches their user ID.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id; //Enforce immutability of the userId field.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to product information. Write access is unrestricted due to missing ownership information.
     * @path /products/{productId}
     * @allow (get) Any user can read product information.
     * @deny (create) Any user can create, update, or delete product information. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access with the intention of owner-only writes, but is currently unrestricted due to missing ownership data.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to inventory batch information. Write access is unrestricted due to missing ownership information.
     * @path /inventoryBatches/{inventoryBatchId}
     * @allow (get) Any user can read inventory batch information.
     * @deny (create) Any user can create, update, or delete inventory batch information. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access with the intention of owner-only writes, but is currently unrestricted due to missing ownership data.
     */
    match /inventoryBatches/{inventoryBatchId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Enforces user-ownership for sale transaction documents. Only the authenticated user can read or write their own transactions.
     * @path /users/{userId}/saleTransactions/{saleTransactionId}
     * @allow (create) User with ID 'user123' creates a new sale transaction under /users/user123.
     * @deny (create) User with ID 'user456' attempts to create a sale transaction under /users/user123.
     * @principle Enforces document ownership and isolates user data.
     */
    match /users/{userId}/saleTransactions/{saleTransactionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId; //Enforce immutability of the userId field.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to sale item information. Write access is unrestricted due to missing ownership information.
     * @path /saleItems/{saleItemId}
     * @allow (get) Any user can read sale item information.
     * @deny (create) Any user can create, update, or delete sale item information. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access with the intention of owner-only writes, but is currently unrestricted due to missing ownership data.
     */
    match /saleItems/{saleItemId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to audit log information. Write access is unrestricted due to missing ownership information.
     * @path /auditLogs/{auditLogId}
     * @allow (get) Any user can read audit log information.
     * @deny (create) Any user can create, update, or delete audit log information. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access with the intention of owner-only writes, but is currently unrestricted due to missing ownership data.
     */
    match /auditLogs/{auditLogId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}