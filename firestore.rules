/**
 * @fileoverview Firestore Security Rules for SecureStock application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing path-based ownership and explicit access controls.
 * Data validation is relaxed to allow for rapid prototyping.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.  User ID is used for ownership.
 * - /products/{productId}: Stores product information.
 * - /inventoryBatches/{inventoryBatchId}: Stores inventory batch data.
 * - /users/{userId}/saleTransactions/{saleTransactionId}: Stores sale transactions for a given user.
 * - /saleItems/{saleItemId}: Stores individual sale items.
 * - /auditLogs/{auditLogId}: Stores audit log entries.
 * - /units/{unitId}: Stores unit of measure information.
 * - /productAttributes/{attributeId}: Stores product attribute definitions.
 *
 * Key Security Decisions:
 * - Strict ownership for user profiles and sale transactions via the /users/{userId} path.
 * - No user listing is allowed to prevent information leakage.
 * - Read-only access to products, inventory batches, sale items, audit logs, units and product attributes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces ownership for user profiles. Only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their own profile.
     * @deny (create) User with ID 'user123' tries to create a profile for 'user456'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows public read access to product information, with no write access.
     * @path /products/{productId}
     * @allow (get) Any user can retrieve product information.
     * @deny (create) Any user cannot create a new product.
     * @principle Public read, no write access.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to inventory batch information, with no write access.
     * @path /inventoryBatches/{inventoryBatchId}
     * @allow (get) Any user can retrieve inventory batch information.
     * @deny (create) Any user cannot create a new inventory batch.
     * @principle Public read, no write access.
     */
    match /inventoryBatches/{inventoryBatchId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Enforces ownership for sale transactions. Only the authenticated user can read/write their own transactions.
     * @path /users/{userId}/saleTransactions/{saleTransactionId}
     * @allow (create) User with ID 'user123' creates a sale transaction under their ID.
     * @deny (create) User with ID 'user123' tries to create a sale transaction under 'user456'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/saleTransactions/{saleTransactionId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing not allowed for security
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows public read access to sale item information, with no write access.
     * @path /saleItems/{saleItemId}
     * @allow (get) Any user can retrieve sale item information.
     * @deny (create) Any user cannot create a new sale item.
     * @principle Public read, no write access.
     */
    match /saleItems/{saleItemId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to audit log information, with no write access.
     * @path /auditLogs/{auditLogId}
     * @allow (get) Any user can retrieve audit log information.
     * @deny (create) Any user cannot create a new audit log.
     * @principle Public read, no write access.
     */
    match /auditLogs/{auditLogId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to unit information, with no write access.
     * @path /units/{unitId}
     * @allow (get) Any user can retrieve unit information.
     * @deny (create) Any user cannot create a new unit.
     * @principle Public read, no write access.
     */
    match /units/{unitId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to product attribute information, with no write access.
     * @path /productAttributes/{attributeId}
     * @allow (get) Any user can retrieve product attribute information.
     * @deny (create) Any user cannot create a new product attribute.
     * @principle Public read, no write access.
     */
    match /productAttributes/{attributeId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}